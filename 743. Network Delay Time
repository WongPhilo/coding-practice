class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        HashMap<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : times) {
            graph.putIfAbsent(edge[0] - 1, new ArrayList<>());
            graph.get(edge[0] - 1).add(new int[]{edge[1]-1, edge[2]});
        }
        
        PriorityQueue<int[]> q = new PriorityQueue<>(1000,(x,y)->x[0] - y[0]);
        int[] s = new int[n];
        for (int i = 0; i < s.length; i++) {
            s[i] = Integer.MAX_VALUE;
        }
        
        q.offer(new int[]{0, k - 1});
        s[k - 1] = 0;
        
        while (!q.isEmpty()) {
            int[] curr = q.remove();
            int w = curr[0];
            int m = curr[1];
            if (graph.get(m) != null) {
                for (int[] arr : graph.get(m)) {
                    int compn = arr[0];
                    int compw = arr[1];
                    if (w + compw < s[compn]) {
                        s[compn] = (w + compw);
                        q.offer(new int[]{s[compn], compn});
                    }
                }
            }
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == Integer.MAX_VALUE) {
                return -1;
            }            
            res = Math.max(s[i], res);
        }                            
        return res;
    }
}
